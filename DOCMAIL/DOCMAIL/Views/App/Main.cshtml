@{
    ViewBag.Title = "Main";
    Layout = "~/Views/Shared/Layout_app.cshtml";
    ViewBag.Title = "DOCMAIL";
}
<div class="container-fluid">
    <div class="row">
        <div class="col text-center mt-2 mb-2">
            <button id="actualizar" class="btn btn-warning" ;">Actualizar Commercial Invoices</button>
        </div>
    </div>

    <div class="row border mb-3 alert alert-warning">
        <div class="col-12 d-flex justify-content-center align-items-center" style="height: 45px; padding: 0;">
            <h1 class="display-5" style="font-size: 1.5rem; text-align: center; font-weight: bold;">
                Estado del Invoice:
            </h1>
        </div>
        <div class="col-12 d-flex justify-content-center align-items-center" style="height: 45px;">
            <div class="form-check text-center mx-2">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="radioEnviados">
                <label class="form-check-label" for="radioEnviados" style="font-size: 1.3rem; font-family: 'Montserrat', sans-serif;">
                    Enviados
                </label>
            </div>
            <div class="form-check text-center mx-2">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="radioPendientes">
                <label class="form-check-label" for="radioPendientes" style="font-size: 1.3rem; font-family: 'Montserrat', sans-serif;">
                    Pendientes
                </label>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-auto mb-1 mt-1">
            <input class="form-control" type="search" placeholder="N°" aria-label="Search" id="buscadorInvoices" />
        </div>
        <div class="col-auto mt-1 mb-1">
            <button id="buscar" class="btn bg-dark text-warning">Buscar Invoice</button>
        </div>
        <div class="col-auto mt-1 mb-1">
            <button id="botonDescargar" class="btn btn-success ">Descargar</button>
        </div>
    </div>

</div>


<div class="row">
    <div id="tabla-container" class="table-responsive" style="height: 550px; overflow-y:auto;">
        <table id="mi-tabla" class="table caption-top table-striped table-bordered table-hover">
            <thead style="position: sticky;top: 0" class="text-warning text-bg-dark">
                <tr>
                    <th>#</th>
                    <th>NUMERO</th>
                    <th>FECHA</th>
                    <th>DESTINATARIO</th>
                    <th>DIRECCION</th>
                    <th>MAIL</th>
                    <th>USUARIO</th>
                    <th>Fecha Ult. Envío</th>
                    <th>Cantidad Envíos</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>



@section scripts {
    <script type="text/javascript">

        let selectedIds = []
        let tipoRegistro;
        let nroInvoice = "";
        const VALOR_ENVIADOS = 1 ;
        const VALOR_PENDIENTES = 0;

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        /*
           Se encarga de limpiar la lista de registros seleccionados y listar los registros segun el tipo(radioButton) elegido.
        */
        function mostrarRegistros() {
            if (document.getElementById("radioEnviados").checked) {
                tipoRegistro = VALOR_ENVIADOS;
                selectedIds = [];
            } else if (document.getElementById("radioPendientes").checked) {
                tipoRegistro = VALOR_PENDIENTES;
                selectedIds = [];

            }
            nroInvoice = "";
            document.getElementById("buscadorInvoices").value = "";
            listarInvoices()
        }

        /*
          Se encarga de actualizar el valor de Nro de invoice segun lo ingresado en el buscador de invoices
        */
        function guardarNroInvoice() {
            nroInvoice = document.getElementById("buscadorInvoices").value;
            if (nroInvoice.length == 0) {
                nroInvoice = "";
            }
        }

        /*
          Se encarga de refrescar los registros segun el radioButton seleccionado y los vuelve a listar
        */
        function actualizarRegistros() {
            if (tipoRegistro === undefined) {
                alert("Por favor, seleccione que tipo de Invoice desea actualizar.");
                return;
            }
            const url = `@Url.Action("UpdateInvoices", "App")`;
            fetch(url);
            listarInvoices()
            alert("Las Commercial Invoices fueron Actualizadas");
        }

        /*
            Se encarga de buscar y mostrar los invoices que tengan un nro parecido o igual al introducido en el buscador de Invoices
        */
        function buscarRegistros() {
            if (tipoRegistro === undefined) {
                alert("Por favor, seleccione que tipo de Invoice desea buscar.");
                return;
            }
            if (isNaN(nroInvoice) && nroInvoice != "") {
                alert("Por favor ingrese solo el valor numerico del Invoice a buscar.");
                return;
            }
            if (document.getElementById("radioEnviados").checked) {
                tipoRegistro = VALOR_ENVIADOS;
            } else if (document.getElementById("radioPendientes").checked) {
                tipoRegistro = VALOR_PENDIENTES;
            }
            listarInvoices();
        }

        /*
            Se encarga de llamar a descargar a todos los invoices seleccionados por el usuario, estos se almacenan en selectedIds
        */
        function descargarSeleccion() {
            if (selectedIds.length == 0) {
                console.log(selectedIds)
                alert("Por favor, seleccione almenos un registro para descargar");
                return;
            }
            selectedIds.forEach(descargar);
            selectedIds = [];
        }
        /*
            Se encarga de descargar el PDF generado en base a los datos vinculados al Nro de Invoice provisto
        */
        function descargar(nroInvoice) {
            const url = `@Url.Action("DescargarInvoice", "App")?nroInvoice=${encodeURIComponent(nroInvoice)}`;
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        console.log("Sin respuesta");
                        throw new Error('Error en la descarga');
                    }
                    console.log("Hay respuesta");
                    return response.blob();
                })
                .then(blob => {
                    const urlBlob = window.URL.createObjectURL(blob); // Creamos un objeto URL para el blob
                    const a = document.createElement('a'); // Crear un enlace
                    a.style.display = 'none';
                    a.href = urlBlob;
                    a.download = `${nroInvoice}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(urlBlob); // Liberamos el objeto URL
                    document.body.removeChild(a);
                })
                .catch(error => console.error('Error:', error));
        }

        /*
            Se encarga de listar todas las Invoices vinculadas al tipo de registro seleccionado (RadioButtons) y, si es que buscador no esta vacio, filtra los invoices por aquellas que tengan un numero similar o igual.
        */
        function listarInvoices() {
            const url = `@Url.Action("GetInvoices", "App")?tipoRegistro=${encodeURIComponent(tipoRegistro)}&nroInvoice=${encodeURIComponent(nroInvoice)}`;
            console.log(selectedIds);
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Error al conectar a la red");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data !== null) {
                        if (data.length === 0) {
                            alert("No se encontró un registro con dicho número en la base de datos");
                        } else {
                            const tabla = document.getElementById('mi-tabla').getElementsByTagName('tbody')[0];
                            tabla.innerHTML = ''; // Limpiar el contenido actual de la tabla
                            data.forEach((item, index) => {
                                const fechaFormateada = item.FECHAULTENV
                                    ? new Date(parseInt(item.FECHAULTENV.match(/-?\d+/)[0])).toLocaleDateString("es-ES")
                                    : new Date().toLocaleDateString("es-ES");

                                const fila = document.createElement('tr');
                                const isChecked = selectedIds.includes(item.FACTURA); // Verificar si el ID está en selectedIds

                                fila.innerHTML = `
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="${item.FACTURA}" id="checkBox${index}" ${isChecked ? 'checked' : ''}>
                                        </div>
                                    </td>
                                    <td>${item.FACTURA}</td>
                                    <td>${item.FECHA}</td>
                                    <td>${item.DESTINATARIO}</td>
                                    <td>${item.DIRECCION}</td>
                                    <td>${item.MAIL}</td>
                                    <td>${item.USUARIO}</td>
                                    <td>${fechaFormateada}</td>
                                    <td>${item.CANT_ENVIOS}</td>
                                `;

                                tabla.appendChild(fila);
                                const checkbox = fila.querySelector(`#checkBox${index}`);
                                checkbox.addEventListener('change', function () {
                                    const checkboxId = this.id; // Obtener el ID del checkbox
                                    if (this.checked) {
                                        selectedIds.push(item.FACTURA); // Agregar el valor de FACTURA al array
                                    } else {
                                        const index = selectedIds.indexOf(item.FACTURA);
                                        if (index > -1) {
                                            selectedIds.splice(index, 1); // Eliminar el valor si está desmarcado
                                        }
                                    }
                                });
                            });
                        }
                    } else {
                        alert("No se recibieron datos válidos del servidor.");
                    }
                })
                .catch(error => {
                    alert("Error al obtener los resultados: " + error);
                });
        }

        document.getElementById("radioEnviados").addEventListener("change", mostrarRegistros);
        document.getElementById("radioPendientes").addEventListener("change", mostrarRegistros);
        document.getElementById("actualizar").addEventListener("click", actualizarRegistros);
        document.getElementById("buscar").addEventListener("click", buscarRegistros);
        document.getElementById("buscadorInvoices").addEventListener("input", guardarNroInvoice);
        document.getElementById("buscadorInvoices").addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                buscarRegistros();
            }
        });
        document.getElementById("botonDescargar").addEventListener("click", function () {
            descargarSeleccion();
            sleep(50000)
            console.log("Lsitando Invoices");
            listarInvoices();

});
    </script>
}
