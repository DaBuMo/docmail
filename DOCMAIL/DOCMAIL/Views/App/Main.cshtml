@{
    ViewBag.Title = "Main";
    Layout = "~/Views/Shared/Layout_app.cshtml";
}
<div class="container-fluid">
    <div class="row">
        <div class="col text-center mt-2 mb-2">
            <button id="actualizar" class="btn btn-warning";">Actualizar Commercial Invoices</button>
        </div>
    </div>

    <div class="row border mb-3 alert alert-warning">
        <div class="col-4 d-flex justify-content-center align-items-center" style="height: 50px; padding: 0;" >
            <h1 class="display-5 mb-0" style="font-size: 1.5rem; text-align: center; width: 100%;">Estado del Invoice:</h1>
        </div>
        <div class="col-4 d-flex justify-content-center align-items-center" style="height: 50px;">
            <div class="form-check text-center">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="radioEnviados">
                <label class="form-check-label" for="radioEnviados">
                    Enviados
                </label>
            </div>
        </div>
        <div class="col-4 d-flex justify-content-center align-items-center" style="height: 50px;">
            <div class="form-check text-center">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="radioPendientes">
                <label class="form-check-label" for="radioPendientes">
                    Pendientes
                </label>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-auto mb-1 mt-1">
            <input class="form-control" type="search" placeholder="N°" aria-label="Search" id="buscadorInvoices" />
        </div>
        <div class="col-auto mt-1 mb-1">
            <button id="buscar" class="btn bg-dark text-warning">Buscar Invoice</button>
        </div>
        <div class="col-auto mt-1 mb-1">
            <button id="descargar" class="btn btn-success ">Descargar</button>
        </div>
    </div>

</div>


<div class="row">
    <div id="tabla-container" class="table-responsive" style="height: 550px; overflow-y:auto;">
        <table id="mi-tabla" class="table caption-top table-striped table-bordered table-hover">
            <thead style="position: sticky;top: 0" class="text-warning text-bg-dark">
                <tr>
                    <th>#</th>
                    <th>NUMERO</th>
                    <th>FECHA</th>
                    <th>DESTINATARIO</th>
                    <th>DIRECCION</th>
                    <th>MAIL</th>
                    <th>USUARIO</th>
                    <th>Fecha Ult. Envío</th>
                    <th>Cantidad Envíos</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
</div>


@section scripts {
    <script type="text/javascript">

        let selectedIds = []
        let tipoRegistro;
        let nroInvoice = "";
        const VALOR_ENVIADOS = 1 ;
        const VALOR_PENDIENTES = 0;

        function mostrarRegistros() {
            if (document.getElementById("radioEnviados").checked) {
                tipoRegistro = VALOR_ENVIADOS;
            } else if (document.getElementById("radioPendientes").checked) {
                tipoRegistro = VALOR_PENDIENTES;
            }
            nroInvoice = "";
            document.getElementById("buscadorInvoices").value = "";
            listarInvoices()
        }

        function guardarNroInvoice() {
            nroInvoice = document.getElementById("buscadorInvoices").value;
            if (nroInvoice.length == 0) {
                nroInvoice = "";
            }
        }

        function actualizarRegistros() {
            if (tipoRegistro === undefined) {
                alert("Por favor, seleccione que tipo de Invoice desea actualizar.");
                return;
            }
            const url = `@Url.Action("UpdateInvoices", "App")`;
            fetch(url);
            listarInvoices()
            alert("Las Commercial Invoices fueron Actualizadas");
        }

        function buscarRegistros() {
            if (tipoRegistro === undefined) {
                alert("Por favor, seleccione que tipo de Invoice desea buscar.");
                return;
            }
            if (isNaN(nroInvoice) && nroInvoice != "") {
                alert("Por favor ingrese solo el valor numerico del Invoice a buscar.");
                return;
            }
            if (document.getElementById("radioEnviados").checked) {
                tipoRegistro = VALOR_ENVIADOS;
            } else if (document.getElementById("radioPendientes").checked) {
                tipoRegistro = VALOR_PENDIENTES;
            }
            listarInvoices()
        }

        function listarInvoices() {

            const url = `@Url.Action("GetInvoices", "App")?tipoRegistro=${encodeURIComponent(tipoRegistro)}&nroInvoice=${encodeURIComponent(nroInvoice)}`;

            fetch(url)

                .then(response => {
                    if (!response.ok) {

                        throw new Error("Error al conectar a la red");
                    }
                    return response.json();
                })

                .then(data => {

                    if (data !== null) {
                        if (data.length == 0) {
                            alert("No se encontro un registro con dicho numero en la base de datos")
                        }
                        else {

                            const tabla = document.getElementById('mi-tabla').getElementsByTagName('tbody')[0];
                            tabla.innerHTML = ''; // Limpiamos el contenido actual de la tabla
                            let id = 0;
                            const selectedIds = [];

                            data.forEach(item => {

                                // Formateamos fecha
                                let fechaFormateada;
                                if (item.FECHAULTENV != null) {
                                    const timestamp = parseInt(item.FECHAULTENV.match(/-?\d+/)[0]);
                                    const fechaUltEnv = new Date(timestamp);
                                    fechaFormateada = fechaUltEnv.toLocaleDateString("es-ES");
                                } else {
                                    fechaFormateada = new Date().toLocaleDateString("es-ES");
                                }

                                const fila = document.createElement('tr');

                                fila.innerHTML = `
                            <td>
                            <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="${item.FACTURA}" id="checkBox${id}">
                            </div>
                            </td>
                            <td>${item.FACTURA}</td>
                            <td>${item.FECHA}</td>
                            <td>${item.DESTINATARIO}</td>
                            <td>${item.DIRECCION}</td>
                            <td>${item.MAIL}</td>
                            <td>${item.USUARIO}</td>
                            <td>${fechaFormateada}</td>
                            <td>${item.CANT_ENVIOS}</td>
                            `;

                                tabla.appendChild(fila);

                                const checkbox = fila.querySelector(`#checkBox${id}`);
                                checkbox.addEventListener('change', function () {
                                    const checkboxId = this.id; // Obtener el ID del checkbox
                                    const checkboxValue = this.value;

                                    // Agregar el ID al array si está marcado
                                    if (this.checked) {
                                        selectedIds.push(checkboxId);
                                        console.log("Checkbox marcado: " + checkboxId + ", Value: " + checkboxValue);
                                        // Eliminar el ID del array si está desmarcado
                                    } else {
                                        const index = selectedIds.indexOf(checkboxId);

                                        if (index > -1) {
                                            selectedIds.splice(index, 1);
                                        }
                                        console.log("Checkbox desmarcado: " + checkboxId);
                                    }
                                    console.log("IDs seleccionados: ", selectedIds); // Mostrar el array actualizado
                                });

                                id++;
                            });
                        }

                    } else {
                        alert("No se recibieron datos válidos del servidor.");
                    }
                })

                .catch(error => {
                    alert("Error al obtener los resultados: " + error);
                });
        }

        document.getElementById("radioEnviados").addEventListener("change", mostrarRegistros);
        document.getElementById("radioPendientes").addEventListener("change", mostrarRegistros);
        document.getElementById("actualizar").addEventListener("click", actualizarRegistros);
        document.getElementById("buscar").addEventListener("click", buscarRegistros);
        document.getElementById("buscadorInvoices").addEventListener("input", guardarNroInvoice);
        document.getElementById("buscadorInvoices").addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                buscarRegistros();
            }
        });

    </script>
}
